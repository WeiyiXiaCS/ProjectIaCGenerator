import boto3
from crewai import Agent, Task, Crew
from langchain_aws import ChatBedrock

def upload_to_s3(bucket_name, file_name, content):
    s3_client = boto3.client('s3')
    s3_client.put_object(Bucket=bucket_name, Key=file_name, Body=content)
    print(f"Uploaded {file_name} to {bucket_name}")

# Set up Amazon Bedrock and DynamoDB Boto3 client
bedrock_runtime = boto3.client(service_name="bedrock-runtime", region_name="us-east-1")
dynamodb_client = boto3.client('dynamodb',region_name="us-east-1")

# Define the table name
table_name = 'UserStoriesBacklog'

# Fetch all items from the table
response = dynamodb_client.scan(TableName=table_name)
items = response['Items']

# Format the data for the prompt
formatted_stories = []

for item in items:
    userstory_title = item.get('userstory_title', {}).get('S', 'N/A')
    action = item.get('action', {}).get('S', 'N/A')
    dependency = item.get('dependency', {}).get('S', 'N/A')
    priority = item.get('priority', {}).get('S', 'N/A')
    story = item.get('story', {}).get('S', 'N/A')

    formatted_story = f"Title: {userstory_title}\nAction: {action}\nDependency: {dependency}\nPriority: {priority}\nStory: {story}\n"
    formatted_stories.append(formatted_story)

# Combine all formatted stories into a single prompt
final_prompt = "\n".join(formatted_stories)

# Lire les AMI IDs depuis le fichier 'AMI_information.txt' et les formater pour le prompt
with open('AMI_Information.txt', 'r') as file:
    ami_list = [line.strip() for line in file if line.strip()]

# Convertir la liste des AMIs en une chaîne formatée pour le prompt
ami_list_str = ', '.join(ami_list)

# Configure the model to use
model_id = "anthropic.claude-3-5-sonnet-20240620-v1:0"
model_kwargs = {
    "max_tokens": 4096,
    "temperature": 1,
    "top_k": 250,
    "top_p": 1,
    "stop_sequences": ["\n\nHuman"],
}

# Create the LangChain Chat object
model = ChatBedrock(
    client=bedrock_runtime,
    model_id=model_id,
    model_kwargs=model_kwargs,
)

SolutionArchitect = Agent(
    role='Senior solution architect aws',
    goal='Analyze requirements and propose an AWS cloud architecture. Validate and refine the architecture for further implementation.',
    backstory="You work at a leading tech think tank specializing in cloud computing and AI technologies. You have extensive experience in AWS cloud services and their application in solving complex business problems.",
    verbose=True,
    allow_delegation=False,
    llm=model
)
CloudOps1 = Agent(
    role='Senior CloudOps Engineer',
    goal='Build the infrastructure based on the architecture generated by the Solution Architect, ensuring a viable and deployable solution using CloudFormation.',
    backstory="An AWS infrastructure expert, you focus on implementing and automating cloud solutions. You are proficient in transforming architecture designs into functional infrastructure code, specifically avoiding references to existing AWS resources.",
    verbose=True,
    allow_delegation=False,
    llm=model
)
CloudOps2 = Agent(
    role='Senior CloudOps Engineer',
    goal='Review and correct the infrastructure code generated by CloudOps1, ensuring adherence to AWS best practices and policies.',
    backstory="A meticulous engineer, you are adept at scrutinizing cloud infrastructure code to ensure correctness and compliance. You have a keen eye for detail, particularly in verifying naming policies, resource references, and the validity of AWS constructs.",
    verbose=True,
    allow_delegation=False,
    llm=model
)

task1 = Task(
    description=f"Conduct a comprehensive analysis of the input content and propose an basic AWS architecture using your expertise. The proposed solution should be documented clearly, and the execution/creation order of services should be outlined. Here is the input document content: {final_prompt}.",
    expected_output="A comprehensive reflection document detailing the proposed architecture and its execution plan",
    agent=SolutionArchitect,
    output_file='reflection.txt'
)
task2 = Task(
    description=f"Examine the architecture generated by the Solution Architect and build a minimum viable demonstration infrastructure in the form of a YAML configuration file, ready to be deployed on CloudFormation in eu-west-3. Ensure that the code does not refer to any existing AWS resources, for ec2: don't include keypairs, and that the ami of the EC2 instance is included in this list: {ami_list_str}.",
    expected_output="A CloudFormation-ready configuration file",
    agent=CloudOps1,
    output_file='architecture.yaml'
)
task3 = Task(
    description=f"Review the infrastructure code generated by the other CloudOps engineer. Pay extrodinary attention to the naming policy of S3 buckets (if exists): if contains possible uppercase, correct that to a lower case; verify that all !Ref references inside the output section are correct. Make necessary corrections and output the complete, corrected code.",
    expected_output="The corrected and validated CloudFormation-ready YAML file, with only the content between ```yaml and ```, which contains only the code part",
    agent=CloudOps2,
    output_file='architecture_reviewed.yaml'
)

crew = Crew(
    agents=[SolutionArchitect, CloudOps1, CloudOps2],
    tasks=[task1, task2, task3],
    verbose=True,
)

crew.kickoff()

# Read content from generated files
with open('reflection.txt', 'r') as file:
    reflection_content = file.read()

with open('architecture.yaml', 'r') as file:
    architecture_content = file.read()

with open('architecture_reviewed.yaml', 'r') as file:
    architecture_content = file.read()

# Upload files to S3
bucket_name = "dupbucketforsolutionsfrontendweiyi"
upload_to_s3(bucket_name, "reflection.txt", reflection_content)
upload_to_s3(bucket_name, "architecture.yaml", architecture_content)
upload_to_s3(bucket_name, "architecture_reviewed.yaml", architecture_content)

print("files saved to s3 bucket successfully")
